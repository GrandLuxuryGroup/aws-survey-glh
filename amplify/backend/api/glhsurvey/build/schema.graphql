type Survey {
  id: ID!
  IsHotelClosed: Boolean
  HotelReopeningDate: AWSDate
  IsHotelContainmentZone: Boolean
  HotelContainmentEndDate: AWSDate
  NbBookings: Int
  NbRoomNightsCanceled: Int
  NbRoomNightsBooked: Int
  HotelLocation: String
  NbRoomNightsBookedFIT: Int
  NbRoomNightsBookedMICE: Int
  NbRoomNightsBookedCorporate: Int
  RemainingRoomNightsBySegment: Int
  RoomNightsCountry1: String
  NbRoomNightsBookedCountry1: Int
  RoomNightsCountry2: String
  NbRoomNightsBookedCountry2: Int
  RoomNightsCountry3: String
  NbRoomNightsBookedCountry3: Int
  RoomNightsCountry4: String
  NbRoomNightsBookedCountry4: Int
  RoomNightsCountry5: String
  NbRoomNightsBookedCountry5: Int
  NbRoomNightsBookedLastWeekApril: Int
  NbRoomNightsBookedLastWeekMay: Int
  NbRoomNightsBookedLastWeekJune: Int
  NbRoomNightsBookedLastWeekJuly: Int
  NbRoomNightsBookedLastWeekAugust: Int
  NbRoomNightsBookedLastWeekSeptember: Int
  TotalNightsBookedLastWeek: Int
  TotalNumberRoomAvailable: Int
  NbOccupiedRoomNightsAvril: Int
  NbOccupiedRoomNightsMay: Int
  NbOccupiedRoomNightsJune: Int
  NbOccupiedRoomNightsJuly: Int
  NbOccupiedRoomNightsAugust: Int
  NbOccupiedRoomNightsSeptember: Int
  NbTotalRoomNightsAvril: Int
  NbTotalRoomNightsMay: Int
  NbTotalRoomNightsJune: Int
  NbTotalRoomNightsJuly: Int
  NbTotalRoomNightsAugust: Int
  NbTotalRoomNightsSeptember: Int
  OccupancyRateApril: Float
  OccupancyRateMay: Float
  OccupancyRateJune: Float
  OccupancyRateJuly: Float
  OccupancyRateAugust: Float
  OccupancyRateSeptember: Float
  Result: String
  Week: String
}

type Tracking {
  id: ID!
  Email: String
  Sub: String
  Week: String
}

type FirstLogin {
  id: ID!
  Email: String
  Sub: String
  LocationHotel: String
}

type ClientCountry {
  id: ID!
  Country: String
  NumberOfClientBookings: Int
  Week: String
}

enum ModelSortDirection {
  ASC
  DESC
}

type ModelSurveyConnection {
  items: [Survey]
  nextToken: String
}

input ModelStringInput {
  ne: String
  eq: String
  le: String
  lt: String
  ge: String
  gt: String
  contains: String
  notContains: String
  between: [String]
  beginsWith: String
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  size: ModelSizeInput
}

input ModelIDInput {
  ne: ID
  eq: ID
  le: ID
  lt: ID
  ge: ID
  gt: ID
  contains: ID
  notContains: ID
  between: [ID]
  beginsWith: ID
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  size: ModelSizeInput
}

input ModelIntInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelFloatInput {
  ne: Float
  eq: Float
  le: Float
  lt: Float
  ge: Float
  gt: Float
  between: [Float]
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelBooleanInput {
  ne: Boolean
  eq: Boolean
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelSizeInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
}

input ModelSurveyFilterInput {
  id: ModelIDInput
  IsHotelClosed: ModelBooleanInput
  HotelReopeningDate: ModelStringInput
  IsHotelContainmentZone: ModelBooleanInput
  HotelContainmentEndDate: ModelStringInput
  NbBookings: ModelIntInput
  NbRoomNightsCanceled: ModelIntInput
  NbRoomNightsBooked: ModelIntInput
  HotelLocation: ModelStringInput
  NbRoomNightsBookedFIT: ModelIntInput
  NbRoomNightsBookedMICE: ModelIntInput
  NbRoomNightsBookedCorporate: ModelIntInput
  RemainingRoomNightsBySegment: ModelIntInput
  RoomNightsCountry1: ModelStringInput
  NbRoomNightsBookedCountry1: ModelIntInput
  RoomNightsCountry2: ModelStringInput
  NbRoomNightsBookedCountry2: ModelIntInput
  RoomNightsCountry3: ModelStringInput
  NbRoomNightsBookedCountry3: ModelIntInput
  RoomNightsCountry4: ModelStringInput
  NbRoomNightsBookedCountry4: ModelIntInput
  RoomNightsCountry5: ModelStringInput
  NbRoomNightsBookedCountry5: ModelIntInput
  NbRoomNightsBookedLastWeekApril: ModelIntInput
  NbRoomNightsBookedLastWeekMay: ModelIntInput
  NbRoomNightsBookedLastWeekJune: ModelIntInput
  NbRoomNightsBookedLastWeekJuly: ModelIntInput
  NbRoomNightsBookedLastWeekAugust: ModelIntInput
  NbRoomNightsBookedLastWeekSeptember: ModelIntInput
  TotalNightsBookedLastWeek: ModelIntInput
  TotalNumberRoomAvailable: ModelIntInput
  NbOccupiedRoomNightsAvril: ModelIntInput
  NbOccupiedRoomNightsMay: ModelIntInput
  NbOccupiedRoomNightsJune: ModelIntInput
  NbOccupiedRoomNightsJuly: ModelIntInput
  NbOccupiedRoomNightsAugust: ModelIntInput
  NbOccupiedRoomNightsSeptember: ModelIntInput
  NbTotalRoomNightsAvril: ModelIntInput
  NbTotalRoomNightsMay: ModelIntInput
  NbTotalRoomNightsJune: ModelIntInput
  NbTotalRoomNightsJuly: ModelIntInput
  NbTotalRoomNightsAugust: ModelIntInput
  NbTotalRoomNightsSeptember: ModelIntInput
  OccupancyRateApril: ModelFloatInput
  OccupancyRateMay: ModelFloatInput
  OccupancyRateJune: ModelFloatInput
  OccupancyRateJuly: ModelFloatInput
  OccupancyRateAugust: ModelFloatInput
  OccupancyRateSeptember: ModelFloatInput
  Result: ModelStringInput
  Week: ModelStringInput
  and: [ModelSurveyFilterInput]
  or: [ModelSurveyFilterInput]
  not: ModelSurveyFilterInput
}

type Query {
  getSurvey(id: ID!): Survey
  listSurveys(filter: ModelSurveyFilterInput, limit: Int, nextToken: String): ModelSurveyConnection
  getTracking(id: ID!): Tracking
  listTrackings(filter: ModelTrackingFilterInput, limit: Int, nextToken: String): ModelTrackingConnection
  getFirstLogin(id: ID!): FirstLogin
  listFirstLogins(filter: ModelFirstLoginFilterInput, limit: Int, nextToken: String): ModelFirstLoginConnection
  getClientCountry(id: ID!): ClientCountry
  listClientCountrys(filter: ModelClientCountryFilterInput, limit: Int, nextToken: String): ModelClientCountryConnection
}

input CreateSurveyInput {
  id: ID
  IsHotelClosed: Boolean
  HotelReopeningDate: AWSDate
  IsHotelContainmentZone: Boolean
  HotelContainmentEndDate: AWSDate
  NbBookings: Int
  NbRoomNightsCanceled: Int
  NbRoomNightsBooked: Int
  HotelLocation: String
  NbRoomNightsBookedFIT: Int
  NbRoomNightsBookedMICE: Int
  NbRoomNightsBookedCorporate: Int
  RemainingRoomNightsBySegment: Int
  RoomNightsCountry1: String
  NbRoomNightsBookedCountry1: Int
  RoomNightsCountry2: String
  NbRoomNightsBookedCountry2: Int
  RoomNightsCountry3: String
  NbRoomNightsBookedCountry3: Int
  RoomNightsCountry4: String
  NbRoomNightsBookedCountry4: Int
  RoomNightsCountry5: String
  NbRoomNightsBookedCountry5: Int
  NbRoomNightsBookedLastWeekApril: Int
  NbRoomNightsBookedLastWeekMay: Int
  NbRoomNightsBookedLastWeekJune: Int
  NbRoomNightsBookedLastWeekJuly: Int
  NbRoomNightsBookedLastWeekAugust: Int
  NbRoomNightsBookedLastWeekSeptember: Int
  TotalNightsBookedLastWeek: Int
  TotalNumberRoomAvailable: Int
  NbOccupiedRoomNightsAvril: Int
  NbOccupiedRoomNightsMay: Int
  NbOccupiedRoomNightsJune: Int
  NbOccupiedRoomNightsJuly: Int
  NbOccupiedRoomNightsAugust: Int
  NbOccupiedRoomNightsSeptember: Int
  NbTotalRoomNightsAvril: Int
  NbTotalRoomNightsMay: Int
  NbTotalRoomNightsJune: Int
  NbTotalRoomNightsJuly: Int
  NbTotalRoomNightsAugust: Int
  NbTotalRoomNightsSeptember: Int
  OccupancyRateApril: Float
  OccupancyRateMay: Float
  OccupancyRateJune: Float
  OccupancyRateJuly: Float
  OccupancyRateAugust: Float
  OccupancyRateSeptember: Float
  Result: String
  Week: String
}

input UpdateSurveyInput {
  id: ID!
  IsHotelClosed: Boolean
  HotelReopeningDate: AWSDate
  IsHotelContainmentZone: Boolean
  HotelContainmentEndDate: AWSDate
  NbBookings: Int
  NbRoomNightsCanceled: Int
  NbRoomNightsBooked: Int
  HotelLocation: String
  NbRoomNightsBookedFIT: Int
  NbRoomNightsBookedMICE: Int
  NbRoomNightsBookedCorporate: Int
  RemainingRoomNightsBySegment: Int
  RoomNightsCountry1: String
  NbRoomNightsBookedCountry1: Int
  RoomNightsCountry2: String
  NbRoomNightsBookedCountry2: Int
  RoomNightsCountry3: String
  NbRoomNightsBookedCountry3: Int
  RoomNightsCountry4: String
  NbRoomNightsBookedCountry4: Int
  RoomNightsCountry5: String
  NbRoomNightsBookedCountry5: Int
  NbRoomNightsBookedLastWeekApril: Int
  NbRoomNightsBookedLastWeekMay: Int
  NbRoomNightsBookedLastWeekJune: Int
  NbRoomNightsBookedLastWeekJuly: Int
  NbRoomNightsBookedLastWeekAugust: Int
  NbRoomNightsBookedLastWeekSeptember: Int
  TotalNightsBookedLastWeek: Int
  TotalNumberRoomAvailable: Int
  NbOccupiedRoomNightsAvril: Int
  NbOccupiedRoomNightsMay: Int
  NbOccupiedRoomNightsJune: Int
  NbOccupiedRoomNightsJuly: Int
  NbOccupiedRoomNightsAugust: Int
  NbOccupiedRoomNightsSeptember: Int
  NbTotalRoomNightsAvril: Int
  NbTotalRoomNightsMay: Int
  NbTotalRoomNightsJune: Int
  NbTotalRoomNightsJuly: Int
  NbTotalRoomNightsAugust: Int
  NbTotalRoomNightsSeptember: Int
  OccupancyRateApril: Float
  OccupancyRateMay: Float
  OccupancyRateJune: Float
  OccupancyRateJuly: Float
  OccupancyRateAugust: Float
  OccupancyRateSeptember: Float
  Result: String
  Week: String
}

input DeleteSurveyInput {
  id: ID
}

type Mutation {
  createSurvey(input: CreateSurveyInput!, condition: ModelSurveyConditionInput): Survey
  updateSurvey(input: UpdateSurveyInput!, condition: ModelSurveyConditionInput): Survey
  deleteSurvey(input: DeleteSurveyInput!, condition: ModelSurveyConditionInput): Survey
  createTracking(input: CreateTrackingInput!, condition: ModelTrackingConditionInput): Tracking
  updateTracking(input: UpdateTrackingInput!, condition: ModelTrackingConditionInput): Tracking
  deleteTracking(input: DeleteTrackingInput!, condition: ModelTrackingConditionInput): Tracking
  createFirstLogin(input: CreateFirstLoginInput!, condition: ModelFirstLoginConditionInput): FirstLogin
  updateFirstLogin(input: UpdateFirstLoginInput!, condition: ModelFirstLoginConditionInput): FirstLogin
  deleteFirstLogin(input: DeleteFirstLoginInput!, condition: ModelFirstLoginConditionInput): FirstLogin
  createClientCountry(input: CreateClientCountryInput!, condition: ModelClientCountryConditionInput): ClientCountry
  updateClientCountry(input: UpdateClientCountryInput!, condition: ModelClientCountryConditionInput): ClientCountry
  deleteClientCountry(input: DeleteClientCountryInput!, condition: ModelClientCountryConditionInput): ClientCountry
}

input ModelSurveyConditionInput {
  IsHotelClosed: ModelBooleanInput
  HotelReopeningDate: ModelStringInput
  IsHotelContainmentZone: ModelBooleanInput
  HotelContainmentEndDate: ModelStringInput
  NbBookings: ModelIntInput
  NbRoomNightsCanceled: ModelIntInput
  NbRoomNightsBooked: ModelIntInput
  HotelLocation: ModelStringInput
  NbRoomNightsBookedFIT: ModelIntInput
  NbRoomNightsBookedMICE: ModelIntInput
  NbRoomNightsBookedCorporate: ModelIntInput
  RemainingRoomNightsBySegment: ModelIntInput
  RoomNightsCountry1: ModelStringInput
  NbRoomNightsBookedCountry1: ModelIntInput
  RoomNightsCountry2: ModelStringInput
  NbRoomNightsBookedCountry2: ModelIntInput
  RoomNightsCountry3: ModelStringInput
  NbRoomNightsBookedCountry3: ModelIntInput
  RoomNightsCountry4: ModelStringInput
  NbRoomNightsBookedCountry4: ModelIntInput
  RoomNightsCountry5: ModelStringInput
  NbRoomNightsBookedCountry5: ModelIntInput
  NbRoomNightsBookedLastWeekApril: ModelIntInput
  NbRoomNightsBookedLastWeekMay: ModelIntInput
  NbRoomNightsBookedLastWeekJune: ModelIntInput
  NbRoomNightsBookedLastWeekJuly: ModelIntInput
  NbRoomNightsBookedLastWeekAugust: ModelIntInput
  NbRoomNightsBookedLastWeekSeptember: ModelIntInput
  TotalNightsBookedLastWeek: ModelIntInput
  TotalNumberRoomAvailable: ModelIntInput
  NbOccupiedRoomNightsAvril: ModelIntInput
  NbOccupiedRoomNightsMay: ModelIntInput
  NbOccupiedRoomNightsJune: ModelIntInput
  NbOccupiedRoomNightsJuly: ModelIntInput
  NbOccupiedRoomNightsAugust: ModelIntInput
  NbOccupiedRoomNightsSeptember: ModelIntInput
  NbTotalRoomNightsAvril: ModelIntInput
  NbTotalRoomNightsMay: ModelIntInput
  NbTotalRoomNightsJune: ModelIntInput
  NbTotalRoomNightsJuly: ModelIntInput
  NbTotalRoomNightsAugust: ModelIntInput
  NbTotalRoomNightsSeptember: ModelIntInput
  OccupancyRateApril: ModelFloatInput
  OccupancyRateMay: ModelFloatInput
  OccupancyRateJune: ModelFloatInput
  OccupancyRateJuly: ModelFloatInput
  OccupancyRateAugust: ModelFloatInput
  OccupancyRateSeptember: ModelFloatInput
  Result: ModelStringInput
  Week: ModelStringInput
  and: [ModelSurveyConditionInput]
  or: [ModelSurveyConditionInput]
  not: ModelSurveyConditionInput
}

enum ModelAttributeTypes {
  binary
  binarySet
  bool
  list
  map
  number
  numberSet
  string
  stringSet
  _null
}

type Subscription {
  onCreateSurvey: Survey @aws_subscribe(mutations: ["createSurvey"])
  onUpdateSurvey: Survey @aws_subscribe(mutations: ["updateSurvey"])
  onDeleteSurvey: Survey @aws_subscribe(mutations: ["deleteSurvey"])
  onCreateTracking: Tracking @aws_subscribe(mutations: ["createTracking"])
  onUpdateTracking: Tracking @aws_subscribe(mutations: ["updateTracking"])
  onDeleteTracking: Tracking @aws_subscribe(mutations: ["deleteTracking"])
  onCreateFirstLogin: FirstLogin @aws_subscribe(mutations: ["createFirstLogin"])
  onUpdateFirstLogin: FirstLogin @aws_subscribe(mutations: ["updateFirstLogin"])
  onDeleteFirstLogin: FirstLogin @aws_subscribe(mutations: ["deleteFirstLogin"])
  onCreateClientCountry: ClientCountry @aws_subscribe(mutations: ["createClientCountry"])
  onUpdateClientCountry: ClientCountry @aws_subscribe(mutations: ["updateClientCountry"])
  onDeleteClientCountry: ClientCountry @aws_subscribe(mutations: ["deleteClientCountry"])
}

type ModelTrackingConnection {
  items: [Tracking]
  nextToken: String
}

input ModelTrackingFilterInput {
  id: ModelIDInput
  Email: ModelStringInput
  Sub: ModelStringInput
  Week: ModelStringInput
  and: [ModelTrackingFilterInput]
  or: [ModelTrackingFilterInput]
  not: ModelTrackingFilterInput
}

input CreateTrackingInput {
  id: ID
  Email: String
  Sub: String
  Week: String
}

input UpdateTrackingInput {
  id: ID!
  Email: String
  Sub: String
  Week: String
}

input DeleteTrackingInput {
  id: ID
}

input ModelTrackingConditionInput {
  Email: ModelStringInput
  Sub: ModelStringInput
  Week: ModelStringInput
  and: [ModelTrackingConditionInput]
  or: [ModelTrackingConditionInput]
  not: ModelTrackingConditionInput
}

type ModelFirstLoginConnection {
  items: [FirstLogin]
  nextToken: String
}

input ModelFirstLoginFilterInput {
  id: ModelIDInput
  Email: ModelStringInput
  Sub: ModelStringInput
  LocationHotel: ModelStringInput
  and: [ModelFirstLoginFilterInput]
  or: [ModelFirstLoginFilterInput]
  not: ModelFirstLoginFilterInput
}

input CreateFirstLoginInput {
  id: ID
  Email: String
  Sub: String
  LocationHotel: String
}

input UpdateFirstLoginInput {
  id: ID!
  Email: String
  Sub: String
  LocationHotel: String
}

input DeleteFirstLoginInput {
  id: ID
}

input ModelFirstLoginConditionInput {
  Email: ModelStringInput
  Sub: ModelStringInput
  LocationHotel: ModelStringInput
  and: [ModelFirstLoginConditionInput]
  or: [ModelFirstLoginConditionInput]
  not: ModelFirstLoginConditionInput
}

type ModelClientCountryConnection {
  items: [ClientCountry]
  nextToken: String
}

input ModelClientCountryFilterInput {
  id: ModelIDInput
  Country: ModelStringInput
  NumberOfClientBookings: ModelIntInput
  Week: ModelStringInput
  and: [ModelClientCountryFilterInput]
  or: [ModelClientCountryFilterInput]
  not: ModelClientCountryFilterInput
}

input CreateClientCountryInput {
  id: ID
  Country: String
  NumberOfClientBookings: Int
  Week: String
}

input UpdateClientCountryInput {
  id: ID!
  Country: String
  NumberOfClientBookings: Int
  Week: String
}

input DeleteClientCountryInput {
  id: ID
}

input ModelClientCountryConditionInput {
  Country: ModelStringInput
  NumberOfClientBookings: ModelIntInput
  Week: ModelStringInput
  and: [ModelClientCountryConditionInput]
  or: [ModelClientCountryConditionInput]
  not: ModelClientCountryConditionInput
}
