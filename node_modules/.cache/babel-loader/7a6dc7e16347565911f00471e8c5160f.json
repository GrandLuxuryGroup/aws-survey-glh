{"ast":null,"code":"var _jsxFileName = \"/Users/christophe/dev/amplify/glh-survey/src/components/SurveyComponent.js\";\nimport React, { Component } from \"react\";\nimport * as Survey from \"survey-react\";\nimport \"survey-react/survey.css\";\nimport { createSurvey, createTracking, createFirstLogin } from \"../graphql/mutations\";\nimport { listTrackings } from '../graphql/queries';\nimport { graphqlOperation, API } from \"aws-amplify\";\nimport { history } from '../AppWithAuth';\nimport firstSurvey from '../survey/FirstServey';\nimport finalSurvey from '../survey/FinalSurvey';\nSurvey.StylesManager.applyTheme(\"orange\");\n\nclass SurveyComponent extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      isCompleted: false,\n      finalResult: \"\"\n    };\n\n    this.onCompleteComponent = async result => {\n      try {\n        if (this.props.hotelLocation === \"\") {\n          console.log(result);\n          console.log(\"Hotel Location :  \" + result.data.HotelLocation);\n          console.log(this.props.userAttributes);\n          await API.graphql(graphqlOperation(createFirstLogin, {\n            input: {\n              'Email': this.props.userAttributes.email,\n              'Sub': this.props.userAttributes.sub,\n              'LocationHotel': result.data.HotelLocation\n            }\n          }));\n        }\n\n        const trakings = await API.graphql(graphqlOperation(listTrackings, {\n          filter: {\n            and: [{\n              Sub: {\n                eq: this.props.userAttributes.sub\n              },\n              Week: {\n                eq: 'W1'\n              }\n            }]\n          }\n        }));\n\n        if (trakings.data.listTrackings.items.length === 0) {\n          //Create a first line for tracking\n          console.log(result.data.Rooms); //await API.graphql(graphqlOperation(createTracking, {input:{'Email':this.props.userAttributes.email, 'Sub':this.props.userAttributes.sub,'Week':'W1'}}));\n          //await API.graphql(graphqlOperation(createSurvey, {input:{ 'FullSurvey' : result.data } }));\n\n          this.setState({\n            isCompleted: true\n          });\n          history.push('/Final');\n        } else {\n          history.push('/FinalRetry');\n        }\n      } catch (err) {\n        console.error(\"error during delete\", err);\n      }\n    };\n  }\n\n  render() {\n    var json = this.props.hotelLocation === \"\" ? firstSurvey : finalSurvey;\n    var surveyRender = !this.state.isCompleted ? /*#__PURE__*/React.createElement(Survey.Survey, {\n      json: json //data={data}\n      ,\n      showCompletedPage: false,\n      onComplete: this.onCompleteComponent,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 7\n      }\n    }) : null;\n    /*var onCompleteComponent = this.state.isCompleted ? (\n    ) : null;*/\n\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 7\n      }\n    }, surveyRender);\n  }\n\n}\n\nexport default SurveyComponent;","map":{"version":3,"sources":["/Users/christophe/dev/amplify/glh-survey/src/components/SurveyComponent.js"],"names":["React","Component","Survey","createSurvey","createTracking","createFirstLogin","listTrackings","graphqlOperation","API","history","firstSurvey","finalSurvey","StylesManager","applyTheme","SurveyComponent","state","isCompleted","finalResult","onCompleteComponent","result","props","hotelLocation","console","log","data","HotelLocation","userAttributes","graphql","input","email","sub","trakings","filter","and","Sub","eq","Week","items","length","Rooms","setState","push","err","error","render","json","surveyRender"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport * as Survey from \"survey-react\";\nimport \"survey-react/survey.css\";\nimport { createSurvey, createTracking, createFirstLogin } from \"../graphql/mutations\";\nimport { listTrackings } from '../graphql/queries';\nimport { graphqlOperation, API } from \"aws-amplify\";\nimport { history } from '../AppWithAuth';\nimport firstSurvey from '../survey/FirstServey';\nimport finalSurvey from '../survey/FinalSurvey';\n\nSurvey.StylesManager.applyTheme(\"orange\");\n\nclass SurveyComponent extends Component {\n\n  state = {\n    isCompleted : false,\n    finalResult : \"\"\n  }\n\n  onCompleteComponent = async (result) => {\n    try {\n      if (this.props.hotelLocation === \"\"){\n        console.log(result);\n        console.log(\"Hotel Location :  \" + result.data.HotelLocation);\n        console.log(this.props.userAttributes);\n        await API.graphql(graphqlOperation(createFirstLogin, {input:{'Email':this.props.userAttributes.email, 'Sub':this.props.userAttributes.sub,'LocationHotel':result.data.HotelLocation}}));\n      }\n      \n      const trakings = await API.graphql(graphqlOperation(listTrackings,  {\n          filter: {\n              and : [{\n              Sub: {\n                  eq: this.props.userAttributes.sub\n              },\n              Week:{\n                eq : 'W1'\n              }\n            }]\n          }\n        }));\n\n      if (trakings.data.listTrackings.items.length === 0) {\n        //Create a first line for tracking\n        console.log(result.data.Rooms);\n        //await API.graphql(graphqlOperation(createTracking, {input:{'Email':this.props.userAttributes.email, 'Sub':this.props.userAttributes.sub,'Week':'W1'}}));\n        //await API.graphql(graphqlOperation(createSurvey, {input:{ 'FullSurvey' : result.data } }));\n        \n        this.setState({ isCompleted: true});\n        history.push('/Final');\n      } else {\n        history.push('/FinalRetry');\n      }\n\n\n     \n    } catch (err) {\n      console.error(\"error during delete\", err);\n    }\n  }\n\n  render() {\n\n\n   \n    var json = (this.props.hotelLocation === \"\")? firstSurvey : finalSurvey;\n    \n\n    var surveyRender = !this.state.isCompleted ? (\n      <Survey.Survey\n        json={json}\n        //data={data}\n        showCompletedPage={false}\n        onComplete={this.onCompleteComponent}\n      />\n    ) : null;\n\n    \n    /*var onCompleteComponent = this.state.isCompleted ? (\n    ) : null;*/\n\n    return (\n      <div>\n        {surveyRender}\n      </div>\n    );\n  }\n}\n\nexport default SurveyComponent;"]},"metadata":{},"sourceType":"module"}